class BlackJack{
		class Player{//Класс, содержащий информацию о игроке и картах на руках.
		protected:
			static int finishedPlayers;
			int score;
			bool finished;//флаг, отвечающий за то, стоит ли игроку предлагать взять еще одну карту, если в игре больше 2 человек и раздача идет по кругу.
			Card deck[6]; //Лучше, конечно, описать руку игрока как List, но нет;)
		public:
			void GetFinishedPlayers();//Получить количество закончивших игроков.
			void Draw(){} //Собственно, данная функция выполняет вытягивание карты из колоды(в теории, изначально было бы неплохо создать экземпляр класса Deck{}, в котором необходимо инициализировать 52 элемента Card
						  //в соответствии с содержимым настоящей колоды карт, или двух колод(зависит от варианта правил), потом расположить эти элементы в случайном порядке, используя святой random,
						  //и в случае, если игрок выбирает взять следующую карту - выдавать ему её из этого массива в соответствии с изначальным замесом
			void Calculate(){}//Здесь производится подсчет очков, эта функция, по логике, должна вызываться внутри функции Draw() после получения новой карты, считать очки и вызывать функцию FinishDraw() в случае 
							  //перебора.
			
			void FinishDraw(){}//Это функция, которую стоило бы назвать SetFinishedTrue, что она делает, полагаю, понятно из названия=) так же она увеличивает значение finishedPlayers на 1.
			bool GetStatus(){}//Возвращает значение переменной finished
			
			
		};
		struct Card{}; //Структура, содержащая данные о номинале карты, масти(хоть в блекджеке в этом нет необходимости) и количестве очков, которые за эту карту получает игрок
		/*если честно, я с трудом представляю, какие еще классы можно было бы добавить к данной структуре для создания игру в блек-джек, скорее всего потому, что я не очень
		силен в проектировании, пока что. Можно, в принципе, добавить производный от игрока класс Dealer, потмоу что для него правила игры немного отличаются от правил для
		остальных игроков, но, в целом, больше ничего придумать я не смог.
		*/
		
protected:		
		Player players[6];//Допускается, что первый игрок(player[0]) я вляется диллером.
public:
		void Start(){
			for(...)//В первом цикле игрокам раздаются карты. Потом запускается еще один цикл, в котором игроки по очереди, если хотят, берут еще карты, или могут отказаться, тогда для этого игрока
					//вызывается функция FinishDraw(). Это происходит до тех пор, пока все игроки(включая диллера) не закончат брать карты
			while(Players::finishedPlayers!=players.length){
				for(int i =0; i< 6;i++){
					if(!players[i].GetStatus()){
						switch(SuggestDraw(i)){
							case('y'):
								players[i].Draw();
								break;
							case('n'):
								players[i].FinishDraw();
								break;
							default:
								players[i].FinishDraw();
								break;						
							}
						}			
					}			
				}			
			}
		
		char SuggestDraw(int i){
			char n;
			std::cout<< "не желает ли игрок "<<i<<" взять еще одну карту?"<<endl;
			std::cin>>n;
			return n;
			}
		void EndGame(){}//В этой функции игра завершается, происходит сравнение очков всех игроков с очками диллера и выдача наград
};
